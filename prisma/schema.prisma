// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom models for CMS
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PageType {
  HOME
  ABOUT
  SERVICES
  SERVICE_DETAIL
  CONTACT
  BLOG
  CUSTOM
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Language {
  TR
  EN
}

model Page {
  id          String     @id @default(cuid())
  slug        String     @unique
  type        PageType
  language    Language   @default(TR)
  title       String
  description String?
  content     Json
  metaTitle   String?
  metaDescription String?
  featured    Boolean    @default(false)
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  analytics PageView[]

  @@index([type, language])
  @@index([published])
}

model Post {
  id              String     @id @default(cuid())
  slug            String     @unique
  title           String
  excerpt         String?
  content         String     @db.Text
  language        Language   @default(TR)
  status          PostStatus @default(DRAFT)
  featured        Boolean    @default(false)
  metaTitle       String?
  metaDescription String?
  featuredImage   String?
  readTime        Int?       // in minutes
  viewCount       Int        @default(0)
  authorId        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  publishedAt     DateTime?

  author   User         @relation(fields: [authorId], references: [id])
  tags     PostTag[]
  analytics PageView[]

  @@index([status, language])
  @@index([publishedAt])
  @@index([featured])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts PostTag[]
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String   @db.Text
  language  Language @default(TR)
  status    String   @default("NEW") // NEW, READ, REPLIED, ARCHIVED
  source    String?  // WEBSITE, WHATSAPP, EMAIL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
}

model Media {
  id        String   @id @default(cuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  alt       String?
  caption   String?
  folder    String?
  createdAt DateTime @default(now())

  @@index([mimeType])
  @@index([folder])
}

// Analytics models
model PageView {
  id          String   @id @default(cuid())
  path        String
  title       String?
  referrer    String?
  userAgent   String?
  ip          String?
  country     String?
  city        String?
  device      String?
  browser     String?
  os          String?
  sessionId   String?
  userId      String?
  duration    Int?     // seconds spent on page
  createdAt   DateTime @default(now())

  // Relations
  pageId      String?
  postId      String?
  page        Page?    @relation(fields: [pageId], references: [id])
  post        Post?    @relation(fields: [postId], references: [id])

  @@index([path])
  @@index([createdAt])
  @@index([sessionId])
  @@index([country])
}

model Analytics {
  id              String   @id @default(cuid())
  date            DateTime @db.Date
  totalViews      Int      @default(0)
  uniqueVisitors  Int      @default(0)
  bounceRate      Float?
  avgSessionTime  Float?   // in seconds
  topPages        Json?
  topReferrers    Json?
  deviceStats     Json?
  browserStats    Json?
  countryStats    Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([date])
  @@index([date])
}

model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  updatedAt   DateTime @updatedAt
}
